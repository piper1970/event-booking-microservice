
services:

  postgres-events-test:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./data/scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"

  zipkin-events-test:
    image: openzipkin/zipkin:3
    restart: always
    shm_size: 128mb
    ports:
      - "9411:9411"

  keycloak-events-test:
    image: keycloak/keycloak:26.1
    ports:
      - "9090:8080"
    environment:
      KC_DB: postgres
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_DB_URL_HOST: postgres-events-test
      KC_DB_URL_DATABASE: keycloak
      KEYCLOAK_ADMIN: ${KC_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD}
      KC_HTTP_PORT: 8080
      KC_HTTP_RELATIVE_PATH: /
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    volumes:
      - ./data/keycloak/:/opt/keycloak/data/import/
    command:
      - start-dev
      - --import-realm
    healthcheck:
      test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8080/auth/health/live']
      interval: 5s
      timeout: 5s
      retries: 20
    depends_on:
      - postgres-events-test

  zookeeper-events-test:
    image: confluentinc/cp-zookeeper:7.9.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-events-test:
    image: confluentinc/cp-kafka:7.9.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-events-test:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-events-test:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      zookeeper-events-test:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 30s
      timeout: 10s
      retries: 5

#  kafka-init:
#    image: confluentinc/cp-kafka:7.9.0
#    depends_on:
#      kafka:
#        condition: service_healthy
#    command: >
#      bash -c "
#        echo 'Creating Kafka topics...'
#        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic create-booking-request --partitions 3 --replication-factor 1
#        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic create-booking-response --partitions 3 --replication-factor 1
#        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic booking-event-unavailable --partitions 3 --replication-factor 1
#        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic cancel-booking --partitions 3 --replication-factor 1
#        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic event-changed --partitions 3 --replication-factor 1
#        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic booking-updates --partitions 3 --replication-factor 1
#        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic event-cancelled --partitions 3 --replication-factor 1
#        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic booking-cancellations --partitions 3 --replication-factor 1
#        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic payment-refund-problems --partitions 3 --replication-factor 1
#        echo 'Topics created.'
#      "

  schema-registry-events-test:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry-events-test
    depends_on:
      kafka-events-test:
        condition: service_healthy
    ports:
      - "9091:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry-events-test
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-events-test:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
