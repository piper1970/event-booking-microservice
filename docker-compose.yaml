volumes:
  postgres-data:
    name: "event-service-postgres-volume"
  zookeeper-data:
    name: "event-service-zookeeper-volume"
  zookeeper-log:
    name: "event-service-zookeeper-log-volume"
  kafka-data:
    name: "event-service-kafka-volume"
  kafka-logs:
    name: "event-service-kafka-logs-volume"
  schema-registry-data:
    name: "event-service-schema-registry-volume"
  grafana-data:
    name: "event-service-grafana-data"

services:

  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_PASSWORD: ${PG_PASSWORD:-postgres_password}
      # needed for initdb shell scripts
      KC_ADMIN: ${KC_ADMIN:-keycloak_admin}
      KC_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD:-keycloak_password}
      NOTIFICATIONS_ADMIN_DB_USER: ${NOTIFICATIONS_ADMIN_DB_USER:-notifications_admin_user}
      NOTIFICATIONS_ADMIN_DB_PASSWORD: ${NOTIFICATIONS_ADMIN_DB_PASSWORD:-notifications_admin_password}
      NOTIFICATIONS_DB_USER: ${NOTIFICATIONS_DB_USER:-notifications_user}
      NOTIFICATIONS_DB_PASSWORD: ${NOTIFICATIONS_DB_PASSWORD:-notifications_password}
      EVENTS_ADMIN_DB_USER: ${EVENTS_ADMIN_DB_USER:-events_admin_user}
      EVENTS_ADMIN_DB_PASSWORD: ${EVENTS_ADMIN_DB_PASSWORD:-events_admin_password}
      EVENTS_DB_USER: ${EVENTS_DB_USER:-events_user}
      EVENTS_DB_PASSWORD: ${EVENTS_DB_PASSWORD:-events_password}
      BOOKINGS_ADMIN_DB_USER: ${BOOKINGS_ADMIN_DB_USER:-bookings_admin_user}
      BOOKINGS_ADMIN_DB_PASSWORD: ${BOOKINGS_ADMIN_DB_PASSWORD:-bookings_admin_password}
      BOOKINGS_DB_USER: ${BOOKINGS_DB_USER:-bookings_user}
      BOOKINGS_DB_PASSWORD: ${BOOKINGS_DB_PASSWORD:-bookings_password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./data/scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"

  redis:
    image: redis:alpine3.21
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}

  zipkin:
    image: openzipkin/zipkin:3
    restart: always
    shm_size: 128mb
    ports:
      - "9411:9411"

  keycloak:
    image: keycloak/keycloak:26.1
    ports:
      - "8180:8080"
    environment:
      KC_DB: postgres
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: ${PG_PASSWORD:-postgres_password}
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: keycloak
      KEYCLOAK_ADMIN: ${KC_ADMIN:-keycloak_admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD:-keycloak_password}
      KC_HTTP_PORT: 8080
      KC_HTTP_RELATIVE_PATH: /
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    volumes:
      - ./data/keycloak/:/opt/keycloak/data/import/
    command:
      - start-dev
      - --import-realm
    depends_on:
      - postgres

  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.9.0
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/var/lib/kafka/data
      - kafka-logs:/tmp/kafka-logs
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 30s
      timeout: 10s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "9091:8081"
    volumes:
      - schema-registry-data:/usr/bin/confluent
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      test: curl --output /dev/null --silent --head --fail http://schema-registry:8081/subjects
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:v3.4.0
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./data/prometheus/prometheus-local.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"

  # See https://hub.docker.com/r/grafana/grafana for initial user/pass requirements
  grafana:
    image: grafana/grafana:12.0.0
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ./data/grafana:/etc/grafana/provisioning/datasources
      - grafana-data:/var/lib/grafana
    environment:
      - GF_USERS_ALLOW_SIGN_UP=false

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.5.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
