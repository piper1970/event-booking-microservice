/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package piper1970.eventservice.common.events.messages;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class BookingEventUnavailable extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5068684542789201919L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BookingEventUnavailable\",\"namespace\":\"piper1970.eventservice.common.events.messages\",\"fields\":[{\"name\":\"bookingId\",\"type\":\"int\"},{\"name\":\"eventId\",\"type\":\"int\"},{\"name\":\"memberEmail\",\"type\":\"string\"},{\"name\":\"memberUsername\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BookingEventUnavailable> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BookingEventUnavailable> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BookingEventUnavailable> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BookingEventUnavailable> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BookingEventUnavailable> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BookingEventUnavailable to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BookingEventUnavailable from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BookingEventUnavailable instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BookingEventUnavailable fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int bookingId;
  private int eventId;
  private java.lang.CharSequence memberEmail;
  private java.lang.CharSequence memberUsername;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BookingEventUnavailable() {}

  /**
   * All-args constructor.
   * @param bookingId The new value for bookingId
   * @param eventId The new value for eventId
   * @param memberEmail The new value for memberEmail
   * @param memberUsername The new value for memberUsername
   */
  public BookingEventUnavailable(java.lang.Integer bookingId, java.lang.Integer eventId, java.lang.CharSequence memberEmail, java.lang.CharSequence memberUsername) {
    this.bookingId = bookingId;
    this.eventId = eventId;
    this.memberEmail = memberEmail;
    this.memberUsername = memberUsername;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return bookingId;
    case 1: return eventId;
    case 2: return memberEmail;
    case 3: return memberUsername;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: bookingId = (java.lang.Integer)value$; break;
    case 1: eventId = (java.lang.Integer)value$; break;
    case 2: memberEmail = (java.lang.CharSequence)value$; break;
    case 3: memberUsername = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'bookingId' field.
   * @return The value of the 'bookingId' field.
   */
  public int getBookingId() {
    return bookingId;
  }


  /**
   * Sets the value of the 'bookingId' field.
   * @param value the value to set.
   */
  public void setBookingId(int value) {
    this.bookingId = value;
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public int getEventId() {
    return eventId;
  }


  /**
   * Sets the value of the 'eventId' field.
   * @param value the value to set.
   */
  public void setEventId(int value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'memberEmail' field.
   * @return The value of the 'memberEmail' field.
   */
  public java.lang.CharSequence getMemberEmail() {
    return memberEmail;
  }


  /**
   * Sets the value of the 'memberEmail' field.
   * @param value the value to set.
   */
  public void setMemberEmail(java.lang.CharSequence value) {
    this.memberEmail = value;
  }

  /**
   * Gets the value of the 'memberUsername' field.
   * @return The value of the 'memberUsername' field.
   */
  public java.lang.CharSequence getMemberUsername() {
    return memberUsername;
  }


  /**
   * Sets the value of the 'memberUsername' field.
   * @param value the value to set.
   */
  public void setMemberUsername(java.lang.CharSequence value) {
    this.memberUsername = value;
  }

  /**
   * Creates a new BookingEventUnavailable RecordBuilder.
   * @return A new BookingEventUnavailable RecordBuilder
   */
  public static piper1970.eventservice.common.events.messages.BookingEventUnavailable.Builder newBuilder() {
    return new piper1970.eventservice.common.events.messages.BookingEventUnavailable.Builder();
  }

  /**
   * Creates a new BookingEventUnavailable RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BookingEventUnavailable RecordBuilder
   */
  public static piper1970.eventservice.common.events.messages.BookingEventUnavailable.Builder newBuilder(piper1970.eventservice.common.events.messages.BookingEventUnavailable.Builder other) {
    if (other == null) {
      return new piper1970.eventservice.common.events.messages.BookingEventUnavailable.Builder();
    } else {
      return new piper1970.eventservice.common.events.messages.BookingEventUnavailable.Builder(other);
    }
  }

  /**
   * Creates a new BookingEventUnavailable RecordBuilder by copying an existing BookingEventUnavailable instance.
   * @param other The existing instance to copy.
   * @return A new BookingEventUnavailable RecordBuilder
   */
  public static piper1970.eventservice.common.events.messages.BookingEventUnavailable.Builder newBuilder(piper1970.eventservice.common.events.messages.BookingEventUnavailable other) {
    if (other == null) {
      return new piper1970.eventservice.common.events.messages.BookingEventUnavailable.Builder();
    } else {
      return new piper1970.eventservice.common.events.messages.BookingEventUnavailable.Builder(other);
    }
  }

  /**
   * RecordBuilder for BookingEventUnavailable instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BookingEventUnavailable>
    implements org.apache.avro.data.RecordBuilder<BookingEventUnavailable> {

    private int bookingId;
    private int eventId;
    private java.lang.CharSequence memberEmail;
    private java.lang.CharSequence memberUsername;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(piper1970.eventservice.common.events.messages.BookingEventUnavailable.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.bookingId)) {
        this.bookingId = data().deepCopy(fields()[0].schema(), other.bookingId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.eventId)) {
        this.eventId = data().deepCopy(fields()[1].schema(), other.eventId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.memberEmail)) {
        this.memberEmail = data().deepCopy(fields()[2].schema(), other.memberEmail);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.memberUsername)) {
        this.memberUsername = data().deepCopy(fields()[3].schema(), other.memberUsername);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing BookingEventUnavailable instance
     * @param other The existing instance to copy.
     */
    private Builder(piper1970.eventservice.common.events.messages.BookingEventUnavailable other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.bookingId)) {
        this.bookingId = data().deepCopy(fields()[0].schema(), other.bookingId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventId)) {
        this.eventId = data().deepCopy(fields()[1].schema(), other.eventId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.memberEmail)) {
        this.memberEmail = data().deepCopy(fields()[2].schema(), other.memberEmail);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.memberUsername)) {
        this.memberUsername = data().deepCopy(fields()[3].schema(), other.memberUsername);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'bookingId' field.
      * @return The value.
      */
    public int getBookingId() {
      return bookingId;
    }


    /**
      * Sets the value of the 'bookingId' field.
      * @param value The value of 'bookingId'.
      * @return This builder.
      */
    public piper1970.eventservice.common.events.messages.BookingEventUnavailable.Builder setBookingId(int value) {
      validate(fields()[0], value);
      this.bookingId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'bookingId' field has been set.
      * @return True if the 'bookingId' field has been set, false otherwise.
      */
    public boolean hasBookingId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'bookingId' field.
      * @return This builder.
      */
    public piper1970.eventservice.common.events.messages.BookingEventUnavailable.Builder clearBookingId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public int getEventId() {
      return eventId;
    }


    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public piper1970.eventservice.common.events.messages.BookingEventUnavailable.Builder setEventId(int value) {
      validate(fields()[1], value);
      this.eventId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public piper1970.eventservice.common.events.messages.BookingEventUnavailable.Builder clearEventId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'memberEmail' field.
      * @return The value.
      */
    public java.lang.CharSequence getMemberEmail() {
      return memberEmail;
    }


    /**
      * Sets the value of the 'memberEmail' field.
      * @param value The value of 'memberEmail'.
      * @return This builder.
      */
    public piper1970.eventservice.common.events.messages.BookingEventUnavailable.Builder setMemberEmail(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.memberEmail = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'memberEmail' field has been set.
      * @return True if the 'memberEmail' field has been set, false otherwise.
      */
    public boolean hasMemberEmail() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'memberEmail' field.
      * @return This builder.
      */
    public piper1970.eventservice.common.events.messages.BookingEventUnavailable.Builder clearMemberEmail() {
      memberEmail = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'memberUsername' field.
      * @return The value.
      */
    public java.lang.CharSequence getMemberUsername() {
      return memberUsername;
    }


    /**
      * Sets the value of the 'memberUsername' field.
      * @param value The value of 'memberUsername'.
      * @return This builder.
      */
    public piper1970.eventservice.common.events.messages.BookingEventUnavailable.Builder setMemberUsername(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.memberUsername = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'memberUsername' field has been set.
      * @return True if the 'memberUsername' field has been set, false otherwise.
      */
    public boolean hasMemberUsername() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'memberUsername' field.
      * @return This builder.
      */
    public piper1970.eventservice.common.events.messages.BookingEventUnavailable.Builder clearMemberUsername() {
      memberUsername = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BookingEventUnavailable build() {
      try {
        BookingEventUnavailable record = new BookingEventUnavailable();
        record.bookingId = fieldSetFlags()[0] ? this.bookingId : (java.lang.Integer) defaultValue(fields()[0]);
        record.eventId = fieldSetFlags()[1] ? this.eventId : (java.lang.Integer) defaultValue(fields()[1]);
        record.memberEmail = fieldSetFlags()[2] ? this.memberEmail : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.memberUsername = fieldSetFlags()[3] ? this.memberUsername : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BookingEventUnavailable>
    WRITER$ = (org.apache.avro.io.DatumWriter<BookingEventUnavailable>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BookingEventUnavailable>
    READER$ = (org.apache.avro.io.DatumReader<BookingEventUnavailable>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.bookingId);

    out.writeInt(this.eventId);

    out.writeString(this.memberEmail);

    out.writeString(this.memberUsername);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.bookingId = in.readInt();

      this.eventId = in.readInt();

      this.memberEmail = in.readString(this.memberEmail instanceof Utf8 ? (Utf8)this.memberEmail : null);

      this.memberUsername = in.readString(this.memberUsername instanceof Utf8 ? (Utf8)this.memberUsername : null);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.bookingId = in.readInt();
          break;

        case 1:
          this.eventId = in.readInt();
          break;

        case 2:
          this.memberEmail = in.readString(this.memberEmail instanceof Utf8 ? (Utf8)this.memberEmail : null);
          break;

        case 3:
          this.memberUsername = in.readString(this.memberUsername instanceof Utf8 ? (Utf8)this.memberUsername : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










