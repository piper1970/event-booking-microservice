package piper1970.eventservice.repository;

import java.time.LocalDateTime;
import java.util.List;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.ClassOrderer.OrderAnnotation;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestClassOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.data.r2dbc.DataR2dbcTest;
import org.springframework.r2dbc.core.DatabaseClient;
import piper1970.eventservice.domain.Event;
import reactor.test.StepVerifier;

@DataR2dbcTest
@DisplayName("Event Repository")
@TestClassOrder(OrderAnnotation.class)
@Order(4)
class EventRepositoryTests {

  @Autowired
  private EventRepository eventRepository;

  @Autowired
  DatabaseClient databaseClient;

  @BeforeEach
  void setUp() {
    var statements = List.of(
        "DROP TABLE IF EXISTS event_service.events;",
        "DROP SCHEMA IF EXISTS event_service;",
        "CREATE SCHEMA event_service;",
        """
              CREATE TABLE IF NOT EXISTS event_service.events
              (
                id                  int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                version             integer,
                facilitator         varchar(60)  NOT NULL,
                title               varchar(255) NOT NULL,
                description         varchar(255),
                location            varchar(255) NOT NULL,
                event_date_time     timestamp    NOT NULL,
                duration_in_minutes int          NOT NULL,
                available_bookings  smallint     NOT NULL,
                cancelled           boolean      NOT NULL DEFAULT false
              );
            """);

    statements.forEach(stmt -> databaseClient.sql(stmt)
        .fetch()
        .rowsUpdated()
        .as(StepVerifier::create)
        .expectNextCount(1)
        .verifyComplete());
  }

  @Test
  @DisplayName("should be able to find event by id and facilitator")
  void findByIdAndFacilitator() {
    var facilitator = "test-facilitator";
    var event1 = Event.builder()
        .facilitator(facilitator)
        .eventDateTime(LocalDateTime.now())
        .availableBookings(2)
        .cancelled(false)
        .description("test-description")
        .durationInMinutes(60)
        .location("test-location")
        .title("test-title")
        .build();

    var event2 = Event.builder()
        .facilitator(facilitator)
        .eventDateTime(LocalDateTime.now())
        .availableBookings(2)
        .cancelled(false)
        .description("test-description2")
        .durationInMinutes(60)
        .location("test-location2")
        .title("test-title2")
        .build();

    var event3 = Event.builder()
        .facilitator(facilitator + "-not")
        .eventDateTime(LocalDateTime.now())
        .availableBookings(2)
        .cancelled(false)
        .description("test-description2")
        .durationInMinutes(60)
        .location("test-location2")
        .title("test-title2")
        .build();

    insertEvents(event1, event2, event3);

    eventRepository.findByIdAndFacilitator(1, facilitator)
        .as(StepVerifier::create)
        .expectNext(event1)
        .verifyComplete();
  }

  private void insertEvents(Event... events) {
    eventRepository.saveAll(List.of(events))
        .as(StepVerifier::create)
        .expectNextCount(events.length)
        .verifyComplete();
  }
}