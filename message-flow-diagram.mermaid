sequenceDiagram
    participant Client
    participant BS as Booking Service
    participant ES as Event Service
    participant NS as Notification Service
    participant Kafka

%% Start Of Booking Section
    note over BS: Get All Bookings Scenario
    Client ->> BS: Member requests to get all member's bookings
    BS ->> BS: Gets all bookings
    BS ->> Client: Return list of all bookings owned by member

    note over BS: Get Booking By Id Scenario
    Client ->> BS: Member requests to get member's booking with given id
    BS ->> BS: Attempt to retrieve booking with given id

    alt Booking found
        BS ->> Client: Return booking
    else Booking not found
        BS ->> Client: Return error
    end

    note over BS: Create New Booking Scenario
    Client ->> BS: Request to create booking
    BS ->> ES: Get event info to verify if event still has available bookings

    alt Bookings are available for event
        BS ->> BS: Set new booking status to IN_PROGRESS
        BS ->> Kafka: Publish to 'booking-created'
        BS ->> Client: Return new booking
    else Bookings are not available for event
        BS ->> Client: Return error (NOT_FOUND)
    end

    Kafka ->> NS: Consume from 'booking-created'
    NS ->> NS: Store unique time-sensitive confirmation link for booking in system
    NS ->> NS: Send 'confirm-booking' email to customer with confirmation link

    alt Customer confirms booking in time
        Client ->> NS: Confirm booking by going to confirmation link
        NS ->> NS: Remove confirmation link from system
        NS ->> Kafka: Publish to 'booking-confirmed'
    end

    note over NS: New Booking Is Confirmed
        Kafka ->> BS: Consume from 'booking-confirmed'
        BS ->> BS: Set booking status to CONFIRMED

        Kafka ->> ES: Consume from 'booking-confirmed'
        ES ->> ES: Determine if event has any available bookings left

        alt Event has bookings left
            ES ->> ES: Decrement available bookings for given event
        else Event has no more available bookings
            ES ->> Kafka: Publish to 'booking-event-unavailable'
        end

    note over ES: No Bookings Available For Event
    Kafka ->> BS: Consume from 'booking-event-unavailable'
    BS ->> BS: Set booking status to CANCELLED

    Kafka ->> NS: Consume from 'booking-event-unavailable'
    NS ->> NS: Send 'booking-event-unavailable' email to member


    note over BS: Cancel Booking Scenario
    Client ->> BS: Member requests to cancel member's booking with given id
    BS ->> ES: Get event associated with booking to verify whether cancellation is possible

    alt Cancellation is possible
        BS ->> BS: Update booking status to CANCELLED
        BS ->> Kafka: Publish to 'booking-cancelled'
        BS ->> Client: Return updated booking

        Kafka ->> ES: Consume From 'booking-cancelled'
        ES ->> ES: Increment available bookings for given event

        Kafka ->> NS: Consume From 'booking-cancelled'
        NS ->> NS: Send 'booking-cancelled' email to member

    else Cancellation no longer possible
        BS ->> Client: Return error (CONFLICT)
    end
%% End Of Booking Section

%% Start Of Events Section

    note over ES: Get All Events Scenario
    Client ->> ES: Request to get all events
    ES ->> ES: Get all events
    ES ->> Client: Return list of all events (may be empty)

    note over ES: Get Event By Id Scenario
    Client ->> ES: Get event with given id
    ES ->> ES: Attempt to get event with given id

    alt Event found
        ES ->> Client: Return event
    else Event not found
        ES ->> Client: Return error (NOT_FOUND)
    end

    note over ES: Event Creation Scenario
    Client ->> ES: Performer requests to create new event
    ES ->> ES: Create new event facilitated by performer
    ES ->> Client: Return new event

    note over ES: Event Update Scenario
    Client ->> ES: Performer requests to update performer's event with given id
    ES->>ES: Verify whether given event with given id can be updated

    alt Event can be updated
        ES ->> ES: Update event
        ES ->> Kafka: Publish to 'event-changed'
        ES ->> Client: Return updated event

        Kafka ->> BS: Consume from 'event-changed'
        BS ->> BS: Update all bookings associated with event
        BS ->> Kafka: Publish to 'bookings-updated'

        Kafka ->> NS: Consume from 'bookings-updated'
        NS ->> NS: Send 'bookings-updated' email to all booking members associated with event

    else Event cannot be updated
        ES ->> Client: Return error (BAD_REQUEST)
    end

    note over ES: Event Cancellation Scenario
    Client ->> ES: Performer requests cancellation of performer's event with given id
    ES ->> ES: Verify if event with given id can be cancelled

    alt Event can be cancelled
        ES ->> ES: Event is cancelled
        ES ->> Kafka: Publish to 'event-cancelled'
        ES ->> Client: Return updated, cancelled event

        Kafka ->> BS: Consume from 'event-cancelled'
        BS ->> BS: Set all bookings status's to CANCELLED
        BS ->> Kafka: Publish to 'bookings-cancelled'

        Kafka ->> NS: Consume from 'bookings-cancelled'
        NS ->> NS: Send 'booking-cancelled' email to all associated members

    else Event cannot be cancelled (event either in progress or completed)
        ES ->> Client: Return error (BAD_REQUEST)
    end
%% End Of Events Section

