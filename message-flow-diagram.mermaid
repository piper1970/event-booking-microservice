sequenceDiagram
    participant Client
    participant BS as Booking Service
    participant ES as Event Service
    participant PS as Payment Service
    participant NS as Notification Service
    participant Kafka
    participant PaymentAPI as External Payment API

    note over BS: Create Booking Scenario
    Client->>BS: Create Booking Request
    BS->>ES: Validate Event Status
    ES-->>BS: Event Valid Response
    
    BS->>BS: Set Booking Status: IN_PROGRESS
    BS->>Kafka: Publish to 'create-booking-request'
    
    Kafka-->>PS: Consume from 'create-booking-request'
    PS->>PaymentAPI: Process Payment
    PaymentAPI-->>PS: Payment Confirmation
    
    alt Payment Success
        PS->>PS: Save Payment Record (PAID)
        PS->>Kafka: Publish to 'create-booking-response',
        
        Kafka-->>BS: Consume from 'create-booking-response'
        BS->>BS: Update Booking Status: CONFIRMED
        
        Kafka-->>NS: Consume from 'create-booking-response'
        NS->>NS: Send 'Confirmation' Email
        
        Kafka-->>ES: Consume from 'create-booking-response'
        
        alt Available Bookings > 0
            ES->>ES: Decrement Available Bookings For Given Event
        else No Available Bookings
            ES->>Kafka: Publish to 'booking-event-unavailable'
            
            Kafka-->>BS: Consume from 'booking-event-unavailable'
            BS->>BS: Update Booking Status: CANCELLED
            
            Kafka-->>NS: Consume from 'booking-event-unavailable'
            NS->>NS: Send 'Event No Longer Available' Email
            
            Kafka-->>PS: Consume from 'booking-event-unavailable'
            PS->>PaymentAPI: Request Refund
            
            alt Refund Success
                PaymentAPI-->>PS: Refund Confirmation
                PS->>PS: Update Payment Record (REFUNDED)
            else Refund Failed
                PaymentAPI-->>PS: Refund Failed
                PS->>PS: Mark Payment as MANUAL_HELP_REQUIRED
                PS->>Kafka: Publish to 'payment-refund-problems'
                
                Kafka-->>NS: Consume from 'payment-refund-problems'
                NS->>NS: Send 'Manual Help Required' Email
            end
        end
    else Payment Failed
        PS->>Kafka: Publish to 'create-booking-response'
        
        Kafka-->>BS: Consume from 'create-booking-response'
        BS->>BS: Update Booking Status: CANCELLED
        
        Kafka-->>NS: Consume from 'create-booking-response'
        NS->>NS: Send 'Payment Failed' Email
    end

    note over BS: Cancel Booking Scenario
    Client->>BS: Creates Booking Cancellation Request for Member
    BS->>ES: Validate whether there is time to cancel the booking

    alt Within Cancellation Window
        BS->>BS: Update Booking Status: CANCELLED
        BS->>Kafka: Publish to 'cancel-booking'

        Kafka->>ES: Consume from 'cancel-booking'
        ES->>ES: Increment Available Bookings For Given Event

        Kafka->>NS: Consume from 'cancel-booking'
        NS->>NS: Send 'Cancellation' Email

        Kafka->>PS: Consume from 'cancel-booking'
        PS->>PaymentAPI: Request Refund

        alt Refund Successful
            PaymentAPI-->>PS: Refund Confirmation
            PS->>PS: Update Payment Record (REFUNDED)
        else Refund Failed
            PaymentAPI-->>PS: Refund Failed
            PS->>PS: Mark Payment as MANUAL_HELP_REQUIRED
            PS->>Kafka: Publish to 'payment-refund-problems'

            Kafka-->>NS: Consume from 'payment-refund-problems'
            NS->>NS: Send 'Manual Help Required' Email
        end
    else Outside Cancellation Window
        BS->>Kafka: Publish to 'cancel-booking-too-late'

        Kafka->>NS: Consume from 'cancel-booking-too-late'
        NS->>NS: Send 'Unable To Cancel' Email
    end
    
    note over ES: Event Update Scenario
    Client->>ES: (Performer) Update Specific Event
    ES->>Kafka: Publish to 'event-changed'
    Kafka-->>BS: Consume from 'event-changed'
    BS->>Kafka: Publish to 'booking-updates'
    Kafka-->>NS: Consume from 'booking-updates'
    NS->>NS: Send Update Email to All Customers
    
    note over ES: Event Cancellation Scenario
    ES->>Kafka: Publish to 'event-cancelled'
    Kafka-->>BS: Consume from 'event-cancelled'
    BS->>BS: Set All Bookings to CANCELLED
    BS->>Kafka: Publish to 'booking-cancellations'
    Kafka-->>NS: Consume from 'booking-cancellations'
    NS->>NS: Send Cancellation Email to All Customers
    Kafka-->>PS: Consume from 'booking-cancellations'
    PS->>PaymentAPI: Process Refunds
