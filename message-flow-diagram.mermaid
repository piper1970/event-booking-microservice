sequenceDiagram
    participant Client
    participant BS as Booking Service
    participant ES as Event Service
    participant PS as Payment Service
    participant NS as Notification Service
    participant Kafka
    participant PaymentAPI as External Payment API

    note over BS: Get All Bookings Scenario
    Client ->> BS: Get All Bookings (owned by client)
    BS ->> BS: Get All Bookings
    BS ->> Client: Return list of all bookings by client (may be an empty)

    note over BS: Get Booking By Id Scenario
    Client ->> BS: Get Booking With ID
    BS ->> BS: Get Booking With Given ID

    alt Booking Found
        BS ->> Client: Return Booking (Status:200/OK)
    else Booking Not Found
        BS ->> Client: Return Error (Status:404/NOT_FOUND, Msg: Not Found)
    end

    note over BS: Create Booking Scenario
    Client ->> BS: Create Booking Request
    BS ->> ES: Get Event Info

    alt Event Returned
        BS ->> BS: Validate against Event

        alt Validation Passes
            BS ->> BS: Set Booking Status: IN_PROGRESS
            BS ->> Kafka: Publish to 'create-booking-request'
            BS ->> Client: Return New Booking(StatusCode:IN_PROGRESS) and Response_Status:201/Created
            Kafka -->> PS: Consume from 'create-booking-request'
            PS ->> PaymentAPI: Process Payment
            PaymentAPI -->> PS: Payment Confirmation

            alt Payment Success
                PS ->> PS: Save Payment Record (PAID)
                PS ->> Kafka: Publish to 'create-booking-response'
                Kafka -->> BS: Consume from 'create-booking-response'
                BS ->> BS: Update Booking Status: CONFIRMED
                Kafka -->> NS: Consume from 'create-booking-response'
                NS ->> NS: Send 'Confirmation' Email
                Kafka -->> ES: Consume from 'create-booking-response'
                ES ->> ES: Determine if Event Has Any Bookings Left

                alt Available Bookings > 0
                    ES ->> ES: Decrement Available Bookings For Given Event

                else No Available Bookings
                    ES ->> Kafka: Publish to 'booking-event-unavailable'
                    Kafka -->> BS: Consume from 'booking-event-unavailable'
                    BS ->> BS: Update Booking Status: CANCELLED
                    Kafka -->> NS: Consume from 'booking-event-unavailable'
                    NS ->> NS: Send 'Event No Longer Available' Email
                    Kafka -->> PS: Consume from 'booking-event-unavailable'
                    PS ->> PaymentAPI: Request Refund

                    alt PaymentAPI Response: Refund Success
                        PS ->> PS: Update Payment: Mark Status as REFUNDED

                    else PaymentAPI Response: Refund Failed
                        PS ->> PS: Update Payment: Mark Status as MANUAL_HELP_REQUIRED
                        PS ->> Kafka: Publish to 'payment-refund-problems'
                        Kafka -->> NS: Consume from 'payment-refund-problems'
                        NS ->> NS: Send 'Manual Help Required' Email
                    end
                end
            else Payment Failed
                PS ->> Kafka: Publish to 'create-booking-response'
                Kafka -->> BS: Consume from 'create-booking-response'
                BS ->> BS: Update Booking Status: CANCELLED
                Kafka -->> NS: Consume from 'create-booking-response'
                NS ->> NS: Send 'Payment Failed' Email
            end

        else Validation Fails
            BS ->> Client: Return Error (Status:422/UNPROCESSABLE_ENTITY, Message: Event Already In Progress)
        end
    else Event Not Found
        BS ->> Client: Return Error (Status:404/NOT_FOUND, Message: Event Not Found)
    end

    note over BS: Cancel Booking Scenario
    Client ->> BS: Creates Booking Cancellation Request for Member
    BS ->> ES: Get Event Associated With Booking

    alt Event-Service Response: Event Returned
        BS ->> BS: Validate against Event

        alt Validation Passes: Cancellation Success
            BS ->> BS: Update Booking Status: CANCELLED
            BS ->> Kafka: Publish to 'cancel-booking'
            BS ->> Client: Return Booking(Status:CANCELLED) with Response_Status(200/OK)
            Kafka ->> ES: Consume from 'cancel-booking'
            ES ->> ES: Increment Available Bookings For Given Event
            Kafka ->> PS: Consume from 'cancel-booking'
            PS ->> PaymentAPI: Request Refund

            alt PaymentAPI Response: Refund Success
                PS ->> PS: Update Payment Status:REFUNDED
            else PaymentAPI Response: Refund Failed
                PS ->> PS: Update Payment Status:MANUAL_HELP_REQUIRED
                PS ->> Kafka: Publish to 'payment-refund-problems'
                Kafka -->> NS: Consume from 'payment-refund-problems'
                NS ->> NS: Send 'Manual Help Required' Email
            end

        else Validation Fails
            BS ->> Client: Return Error (Status:409/CONFLICT, Msg: Booking cannot be cancelled once event starts)
        end

    else Event-Service Response: Event Not Found
        BS ->> Client: Return Error(Status:404/NOT_FOUND, Msg: Booking Not Found)
    end

    note over ES: Get All Events Scenario
    Client ->> ES: Get All Events
    ES ->> ES: Get All Bookings
    ES ->> Client: Return list of all events (may be empty)

    note over ES: Get Event By Id Scenario
    Client ->> ES: Get Event By ID
    ES ->> ES: Get Event With Given ID

    alt Event Found
        ES ->> Client: Return Event (Status:200/OK)
    else Event Not Found
        ES ->> Client: Return Error (Status:404/NOT_FOUND, Msg: Not Found)
    end

    note over ES: Event Creation Scenario
    Client ->> ES: (Performer) Create Event
    ES ->> ES: Create Event
    ES ->> Client: Return Event, with Status:201/CREATED

    note over ES: Event Update Scenario
    Client ->> ES: (Performer/Owner) Updates Event
    ES-->ES: Get Event

    alt Event Found
        ES->>ES: Validate Event Can Be Updated

        alt Event Can Be Updated
            ES->>ES: Update Event
            ES ->> Kafka: Publish to 'event-changed'
            ES ->> Client: Return Updated Event (StatusCode: 200/OK)

            Kafka -->> BS: Consume from 'event-changed'
            BS ->> Kafka: Publish to 'booking-updates'

            Kafka -->> NS: Consume from 'booking-updates'
            NS ->> NS: Send Update Email to All Customers

        else Event Cannot Be Updated
            ES->>Client: Return Error (StatusCode:404/BAD_REQUEST, Msg: Event Update Period Has Passed)
        end

    else Event Not Found
        ES ->> Client: Return Error (Status:404/NOT_FOUND, Msg: Event Not Found)
    end


    note over ES: Event Cancellation Scenario
    Client --> ES: (Performer/Owner) Cancel Event
    ES ->> ES: Get Event

    alt Event Found
        ES ->> ES: Validate Event Can Be Cancelled

        alt Event Can Be Cancelled
            ES ->> ES: Event Is Cancelled
            ES ->> Kafka: Publish to 'event-cancelled'
            ES ->> Client: Return New Event (cancelled=true)

            Kafka -->> BS: Consume from 'event-cancelled'
            BS ->> BS: Set All Bookings to CANCELLED
            BS ->> Kafka: Publish to 'booking-cancellations'

            Kafka -->> NS: Consume from 'booking-cancellations'
            NS ->> NS: Send Cancellation Email to All Customers

            Kafka -->> PS: Consume from 'booking-cancellations'
            PS ->> PaymentAPI: Process Refunds

        else Event Cannot Be Cancelled (cancellation window has passed)
            ES ->> Client: Return Error (Status:400/BAD_REQUEST, Msg: Update-Window)
        end

    else Event Not Found
        ES ->> Client: Return Error (Status:404/NOT_FOUND, Msg: Event Not Found)
    end

