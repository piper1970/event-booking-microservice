package piper1970.notificationservice.repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.ClassOrderer.OrderAnnotation;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestClassOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.data.r2dbc.DataR2dbcTest;
import org.springframework.r2dbc.core.DatabaseClient;
import piper1970.notificationservice.domain.BookingConfirmation;
import piper1970.notificationservice.domain.ConfirmationStatus;
import reactor.test.StepVerifier;

@DataR2dbcTest
@DisplayName("Booking-Confirmation Repository")
@TestClassOrder(OrderAnnotation.class)
@Order(3)
class BookingConfirmationRepositoryTests {

  @Autowired
  BookingConfirmationRepository bookingConfirmationRepository;

  @Autowired
  DatabaseClient databaseClient;

  @BeforeEach
  void setUp() {

    var statements = List.of(
        "DROP TABLE IF EXISTS event_service.booking_confirmations;",
        "DROP SCHEMA IF EXISTS event_service;",
        "CREATE SCHEMA event_service;",
        """
            CREATE TABLE event_service.booking_confirmations
            (
              id                     int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
              version                int,
              booking_id             int          NOT NULL,
              event_id               int          NOT NULL,
              confirmation_string    UUID         NOT NULL,
              booking_user           varchar(255) NOT NULL,
              booking_email          varchar(255) NOT NULL,
              confirmation_date_time timestamp    NOT NULL,
              duration_in_minutes    int          NOT NULL,
              confirmation_status    varchar(30)  NOT NULL
            );
            """
    );

    statements.forEach(stmt -> databaseClient.sql(stmt)
        .fetch()
        .rowsUpdated()
        .as(StepVerifier::create)
        .expectNextCount(1)
        .verifyComplete());
  }

  @Test
  @DisplayName("should be able to find single record by confirmation-string")
  void findByConfirmationString() {
    var goodString = UUID.randomUUID();
    var otherString = UUID.randomUUID();

    var badConfirmation = BookingConfirmation.builder()
        .bookingEmail("test-email")
        .bookingUser("test-user")
        .confirmationDateTime(LocalDateTime.now())
        .confirmationStatus(ConfirmationStatus.AWAITING_CONFIRMATION)
        .bookingId(1)
        .eventId(1)
        .durationInMinutes(60)
        .confirmationString(otherString)
        .build();

    var goodConfirmation = BookingConfirmation.builder()
        .bookingEmail("test-email")
        .bookingUser("test-user")
        .confirmationDateTime(LocalDateTime.now())
        .confirmationStatus(ConfirmationStatus.AWAITING_CONFIRMATION)
        .bookingId(1)
        .eventId(1)
        .durationInMinutes(60)
        .confirmationString(goodString)
        .build();

    insertConfirmationsIntoRepository(badConfirmation, goodConfirmation);

    bookingConfirmationRepository.findByConfirmationString(goodString)
        .as(StepVerifier::create)
        .expectNext(goodConfirmation)
        .verifyComplete();
  }

  @Test
  @DisplayName("should be able to find all records with given confirmation-status")
  void findByConfirmationStatus() {

    var confirmation1 = BookingConfirmation.builder()
        .bookingEmail("test-email")
        .bookingUser("test-user")
        .confirmationDateTime(LocalDateTime.now())
        .confirmationStatus(ConfirmationStatus.EXPIRED)
        .bookingId(1)
        .eventId(1)
        .durationInMinutes(60)
        .confirmationString(UUID.randomUUID())
        .build();

    var confirmation2 = BookingConfirmation.builder()
        .bookingEmail("test-email")
        .bookingUser("test-user")
        .confirmationDateTime(LocalDateTime.now())
        .confirmationStatus(ConfirmationStatus.AWAITING_CONFIRMATION)
        .bookingId(1)
        .eventId(1)
        .durationInMinutes(60)
        .confirmationString(UUID.randomUUID())
        .build();

    var confirmation3 = BookingConfirmation.builder()
        .bookingEmail("test-email")
        .bookingUser("test-user")
        .confirmationDateTime(LocalDateTime.now())
        .confirmationStatus(ConfirmationStatus.AWAITING_CONFIRMATION)
        .bookingId(1)
        .eventId(1)
        .durationInMinutes(60)
        .confirmationString(UUID.randomUUID())
        .build();

    var confirmation4 = BookingConfirmation.builder()
        .bookingEmail("test-email")
        .bookingUser("test-user")
        .confirmationDateTime(LocalDateTime.now())
        .confirmationStatus(ConfirmationStatus.CONFIRMED)
        .bookingId(1)
        .eventId(1)
        .durationInMinutes(60)
        .confirmationString(UUID.randomUUID())
        .build();

    insertConfirmationsIntoRepository(confirmation1, confirmation2, confirmation3, confirmation4);

    bookingConfirmationRepository.findByConfirmationStatus(ConfirmationStatus.AWAITING_CONFIRMATION)
        .as(StepVerifier::create)
        .expectNext(confirmation2)
        .expectNext(confirmation3)
        .verifyComplete();
  }

  @Test
  @DisplayName("should be able to delete all records older than a given date")
  void deleteByConfirmationDateTimeBefore() {

    var deletionDateTime = LocalDateTime.now().minusDays(1);

    var confirmation1 = BookingConfirmation.builder()
        .bookingEmail("test-email")
        .bookingUser("test-user")
        .confirmationDateTime(LocalDateTime.now())
        .confirmationStatus(ConfirmationStatus.AWAITING_CONFIRMATION)
        .bookingId(1)
        .eventId(1)
        .durationInMinutes(60)
        .confirmationString(UUID.randomUUID())
        .build();

    var confirmation2 = BookingConfirmation.builder()
        .bookingEmail("test-email")
        .bookingUser("test-user")
        .confirmationDateTime(LocalDateTime.now().minusDays(1).minusHours(2))
        .confirmationStatus(ConfirmationStatus.EXPIRED)
        .bookingId(1)
        .eventId(1)
        .durationInMinutes(60)
        .confirmationString(UUID.randomUUID())
        .build();

    var confirmation3 = BookingConfirmation.builder()
        .bookingEmail("test-email")
        .bookingUser("test-user")
        .confirmationDateTime(LocalDateTime.now().minusDays(2))
        .confirmationStatus(ConfirmationStatus.EXPIRED)
        .bookingId(1)
        .eventId(1)
        .durationInMinutes(60)
        .confirmationString(UUID.randomUUID())
        .build();

    var confirmation4 = BookingConfirmation.builder()
        .bookingEmail("test-email")
        .bookingUser("test-user")
        .confirmationDateTime(LocalDateTime.now().minusHours(2))
        .confirmationStatus(ConfirmationStatus.CONFIRMED)
        .bookingId(1)
        .eventId(1)
        .durationInMinutes(60)
        .confirmationString(UUID.randomUUID())
        .build();

    var confirmation5 = BookingConfirmation.builder()
        .bookingEmail("test-email")
        .bookingUser("test-user")
        .confirmationDateTime(LocalDateTime.now().minusHours(23))
        .confirmationStatus(ConfirmationStatus.CONFIRMED)
        .bookingId(1)
        .eventId(1)
        .durationInMinutes(60)
        .confirmationString(UUID.randomUUID())
        .build();

    insertConfirmationsIntoRepository(confirmation1, confirmation2, confirmation3, confirmation4, confirmation5);

    bookingConfirmationRepository.deleteByConfirmationDateTimeBefore(deletionDateTime)
        .as(StepVerifier::create)
        .expectNext(2)
        .verifyComplete();

    bookingConfirmationRepository.findAll()
        .as(StepVerifier::create)
        .expectNextCount(3)
        .verifyComplete();

  }

  private void insertConfirmationsIntoRepository(BookingConfirmation... bookingConfirmations) {
    bookingConfirmationRepository.saveAll(List.of(bookingConfirmations))
        .as(StepVerifier::create)
        .expectNextCount(bookingConfirmations.length)
        .verifyComplete();
  }
}