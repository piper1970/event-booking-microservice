events.db.host=localhost

# rdbc url
spring.r2dbc.url=r2dbc:postgresql://${events.db.host}:5432/events?schema=event_service

# flyway properties
spring.flyway.url=jdbc:postgresql://${events.db.host}:5432/events
spring.flyway.schemas=event_service
spring.flyway.baseline-on-migrate=true

oauth2.issuer.uri=http://localhost:8180/realms/piper1970
oauth2.client.id=event-service-client
spring.security.oauth2.resourceserver.jwt.issuer-uri=${oauth2.issuer.uri}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${oauth2.issuer.uri}/protocol/openid-connect/certs

# amount of time before event happens that changes can occur
event-repository.timout.milliseconds=2000

# Kafka
spring.kafka.consumer.group-id=event-service-group
spring.kafka.producer.transaction-id-prefix=event-service-
kafka.dlt.suffix=-es-dlt

# Configuration for /info endpoint
info.application.name=Event Service
info.application.description=Restful api for accessing and setting up events within the Event-Booking Service

#R2DBC performance
spring.r2dbc.pool.enabled=true
spring.r2dbc.pool.initial-size=20
spring.r2dbc.pool.max-size=30

# Scheduled Services
# 5 minutes(300000 milliseconds), 1 minute(60000 milliseconds)
scheduler.completed-events.fixed.delay.millis=300000
scheduler.completed-events.initial.delay.millis=60000
scheduler.started-events.fixed.delay.millis=300000
scheduler.started-events.initial.delay.millis=60000
scheduler.retry.max=2

# Reactive Retry Specs
repository.retry.max.attempts=3
repository.retry.duration.millis=500
repository.retry.jitter.factor=0.7D
kafka.retry.max.attempts=3
kafka.retry.duration.millis=500
kafka.retry.jitter.factor=0.7D