# Database host
bookings.db.host=localhost

# R2DBC Database Connection
spring.r2dbc.url=r2dbc:postgresql://${bookings.db.host}:5432/bookings?schema=event_service

# Flyway Properties
spring.flyway.url=jdbc:postgresql://${bookings.db.host}:5432/bookings
spring.flyway.schemas=event_service
spring.flyway.baseline-on-migrate=true

# Security Properties
oauth2.issuer.uri=http://localhost:9090/realms/piper1970
oauth2.client.id=event-service-client
spring.security.oauth2.resourceserver.jwt.issuer-uri=${oauth2.issuer.uri}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${oauth2.issuer.uri}/protocol/openid-connect/certs

# event-service url
api.event-service.uri=http://localhost:8081

# Timeouts
booking-repository.timout.milliseconds=2000
event-request-service.timeout.milliseconds=2000

# Configuration for /info endpoint
info.application.name=Booking Service
info.application.description=Restful api for accessing and setting up bookings for events in the Event-Booking Service

# Kafka info
spring.kafka.consumer.group-id=event-booking-service-group
spring.kafka.producer.transaction-id-prefix=booking-service-
kafka.dlt.suffix=-bs-dlt

#R2DBC performance
spring.r2dbc.pool.enabled=true
spring.r2dbc.pool.initial-size=20
spring.r2dbc.pool.max-size=30

