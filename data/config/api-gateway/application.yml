# local api endpoints
api:
  uri:
    booking-service: http://localhost:8083
    event-service: http://localhost:8081
    notification-service: http://localhost:8084

# cors/csrf properties used in security context
csrf:enabled: false
cors:allowedOrigin: "*"

# OpenAPI/Swagger
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /v3/swagger-ui/index.html
    config-url: /v3/api-docs/swagger-config
    urlsPrimaryName: Event Service Gateway
    urls:
      - name: Event Service Gateway
        url: /v3/api-docs
      - name: Booking Service
        url: /v3/api-docs/bookings
      - name: Event Service
        url: /v3/api-docs/events

spring:
  # Database
  r2dbc.url: r2dbc:h2:mem:///authentication

  # redis - for rate-limiting
  data:
    redis:
      host: localhost
      port: 6379
      password: ${REDIS_PASSWORD}

  # Oauth2 security
  security:
    oauth2:
      client:
        registration:
          event-service-client:
            client-name: ${OAUTH2_CLIENT_ID}
            provider: keycloak
            authorization-grant-type: authorization_code
            client-id: ${OAUTH2_CLIENT_ID}
            client-secret: ${OAUTH2_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/keycloak"
            scope: openid, profile, roles
        provider:
          keycloak:
            jwk-set-uri: http://localhost:8180/realms/piper1970/protocol/openid-connect/certs
            authorization-uri: http://localhost:8180/realms/piper1970/protocol/openid-connect/auth
            token-uri: http://localhost:8180/realms/piper1970/protocol/openid-connect/token
            user-info-uri: http://localhost:8180/realms/piper1970/protocol/openid-connect/userinfo
            user-name-attribute: sub

  # Routing
  cloud:
    gateway:
      globalcors:
        cors-configuration:
          '[/**]':
            allowed-origins:
              - "http://localhost:${server.port}" # Gateway URL
              - "http://localhost:8180" # Keycloak URL
              - "http://localhost:8888" # Config URL
            allowed-methods:
              - GET
              - POST
              - PUT
              - PATCH
              - OPTIONS
              - HEAD
            allowed-headers: "*"
            allow-credentials: true
      default-filters:
        - name: RequestRateLimiter
          args:
            key-resolver: "#{@hostAddressResolver}"
            redis-rate-limiter.replenishRate: 20
            redis-rate-limiter.burstCapacity: 40
            redis-rate-limiter.requestedTokens: 1
        - TokenRelay=
        - RemoveRequestHeader=Cookie
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
      routes:
        - id: booking-service
          uri: ${api.uri.booking-service}
          predicates:
            - Path=/api/bookings/**,/api/bookings,/bookings/api-docs,/bookings/api-docs/**
        - id: event-service
          uri: ${api.uri.event-service}
          predicates:
            - Path=/api/events/**,/api/events,/events/api-docs,/events/api-docs/**
        - id: notification-service
          uri: ${api.uri.notification-service}
          predicates:
            - Path=/api/notifications/**,/api/notifications
        - id: booking-service-openapi
          uri: ${api.uri.booking-service}
          predicates:
            - Path=/v3/api-docs/bookings
          filters:
            - RewritePath=/v3/api-docs/bookings,/v3/api-docs
        - id: event-service-openapi
          uri: ${api.uri.event-service}
          predicates:
            - Path=/v3/api-docs/events
          filters:
            - RewritePath=/v3/api-docs/events,/v3/api-docs




