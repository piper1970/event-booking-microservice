#!/bin/bash

# Relies on BOOKINGS_ADMIN_DB_USER, BOOKINGS_ADMIN_DB_PASSWORD,
# BOOKINGS_DB_USER, and BOOKINGS_DB_PASSWORD environment variables

psql <<-END
DROP DATABASE IF EXISTS bookings;
CREATE DATABASE bookings
    WITH
    OWNER = postgres
    ENCODING = 'UTF8'
    LOCALE_PROVIDER = 'libc'
    CONNECTION LIMIT = -1
    IS_TEMPLATE = False;

-- Create admin role
DROP ROLE IF EXISTS $BOOKINGS_ADMIN_DB_USER;
CREATE ROLE $BOOKINGS_ADMIN_DB_USER WITH
    LOGIN
    NOSUPERUSER
    NOCREATEDB
    NOCREATEROLE
    INHERIT
    NOREPLICATION
    NOBYPASSRLS
    CONNECTION LIMIT -1
    ENCRYPTED PASSWORD '$BOOKINGS_ADMIN_DB_PASSWORD';

-- Grant permissions for admin role
GRANT ALL ON DATABASE bookings TO $BOOKINGS_ADMIN_DB_USER;

-- move to bookings db
\c bookings

-- setup schema
CREATE SCHEMA event_service;
GRANT ALL ON SCHEMA event_service to $BOOKINGS_ADMIN_DB_USER;
GRANT ALL ON ALL TABLES IN SCHEMA event_service to $BOOKINGS_ADMIN_DB_USER;
GRANT ALL ON ALL SEQUENCES IN SCHEMA event_service to $BOOKINGS_ADMIN_DB_USER;

-- Create regular user
DROP ROLE IF EXISTS $BOOKINGS_DB_USER;
CREATE ROLE $BOOKINGS_DB_USER WITH
    LOGIN
    NOSUPERUSER
    INHERIT
    NOCREATEDB
    NOCREATEROLE
    NOREPLICATION
    NOBYPASSRLS
    CONNECTION LIMIT -1
    ENCRYPTED PASSWORD '$BOOKINGS_DB_PASSWORD';

-- Grant permissions for regular user
GRANT CONNECT ON DATABASE bookings TO $BOOKINGS_DB_USER;
GRANT USAGE ON SCHEMA event_service to $BOOKINGS_DB_USER;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA event_service to $BOOKINGS_DB_USER;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA event_service to $BOOKINGS_DB_USER;
ALTER DEFAULT PRIVILEGES IN SCHEMA event_service FOR ROLE $BOOKINGS_ADMIN_DB_USER
    GRANT SELECT, UPDATE, DELETE, INSERT ON TABLES TO $BOOKINGS_DB_USER;
ALTER DEFAULT PRIVILEGES IN SCHEMA event_service FOR ROLE $BOOKINGS_ADMIN_DB_USER
    GRANT USAGE, SELECT ON SEQUENCES TO $BOOKINGS_DB_USER;

END