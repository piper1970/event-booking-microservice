oauth2.client.id=event-service-client
oauth2.realm=testrealm
oauth2.issuer.host=${keystore-service.url: http://localhost:9191}
spring.security.oauth2.resourceserver.jwt.issuer-uri=${oauth2.issuer.host}/realms/${oauth2.realm}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${oauth2.issuer.host}/realms/${oauth2.realm}/protocol/openid-connect/certs

spring.r2dbc.url=r2dbc:h2:mem:///bookings
spring.r2dbc.username=bookings_user_test
spring.r2dbc.password=bookings_password_test

api.event-service.uri=${event-service.url: http://localhost:8081}

logging.level.piper1970.bookingservice=debug

# needed to override WebClient builder settings
spring.main.allow-bean-definition-overriding=true

booking-repository.timout.milliseconds=1500
event-request-service.timeout.milliseconds=1500

kafka.replication.factor=1
kafka.partition.count=3
kafka.retention.days=3
kafka.bootstrap.servers=localhost:9092

spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.client-id=test-client
spring.kafka.consumer.group-id=test-client-group
spring.kafka.bootstrap-servers=${kafka.bootstrap.servers}
spring.kafka.properties.schema.registry.url=not-used
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.IntegerDeserializer
spring.kafka.consumer.value-deserializer=piper1970.eventservice.common.testing.TestingAvroDeserializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.IntegerSerializer
spring.kafka.producer.value-serializer=piper1970.eventservice.common.testing.TestingAvroSerializer




