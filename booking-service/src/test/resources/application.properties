spring.application.name=booking-service
server.port=8083

oauth2.client.id=event-service-client
oauth2.realm=testrealm
oauth2.issuer.host=${keystore-service.url: http://localhost:9191}
spring.security.oauth2.resourceserver.jwt.issuer-uri=${oauth2.issuer.host}/realms/${oauth2.realm}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${oauth2.issuer.host}/realms/${oauth2.realm}/protocol/openid-connect/certs

spring.r2dbc.url=r2dbc:h2:mem:///bookings
spring.r2dbc.username=bookings_user_test
spring.r2dbc.password=bookings_password_test

api.event-service.uri=${event-service.url: http://localhost:8081}

# needed to override WebClient builder settings
spring.main.allow-bean-definition-overriding=true

booking-repository.timout.milliseconds=1500
event-request-service.timeout.milliseconds=1500

# Kafka mock properties
kafka.replication.factor=1
kafka.partition.count=1
kafka.retention.days=1
kafka.bootstrap.servers=${spring.embedded.kafka.brokers: localhost:9092}
kafka.schema.registry.url=http://localhost:9091

spring.kafka.client-id=test-client-booking-service
spring.kafka.consumer.group-id=test-client-booking-service-group
spring.kafka.bootstrap-servers=${kafka.bootstrap.servers}
spring.kafka.properties.schema.registry.url=${kafka.schema.registry.url}
spring.kafka.properties.specific.avro.reader=true
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.IntegerDeserializer
spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.IntegerSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
spring.kafka.producer.properties.auto.register.schemas=true
spring.kafka.producer.properties.group-id=test-producer-group

logging.level.piper1970.bookingservice=debug

#R2DBC performance
spring.r2dbc.pool.enabled=true
spring.r2dbc.pool.initial-size=50
spring.r2dbc.pool.max-size=100




